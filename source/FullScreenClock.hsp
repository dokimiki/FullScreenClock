/*
Copyright 2020 dokimiki

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
#cmpopt optcode 1
#cmpopt varinit 1
#cmpopt optprm 1
#packopt name "FullScreenClock"
#packopt upx "1"
#packopt last "1"
#bootopt notimer 0
#bootopt hsp64 0
#bootopt utf8 0
;----------↓初期化↓----------
*init
	cls
	;普通に使う変数の初期化
	debug_text = "init.variable"
	version = "v0.1"
	program_name = "full screen clock"
	str_cnt = 0
	config_select = 0
	config_select_temp = 0
	clock_text = ""
	;error系の変数の初期化
	error_logfile = "clock_error.log"
	error_program_name = ""
	error_reason = ""
	error_program_info = ""
	error_variable = ""
	error_system_info = ""
	error_HSP_info = ""
	error_now_time = ""
	error_version = ""
	error_message = ""
	sdim file_dir,64
	;config系の変数の初期化
	config_file = "clock.cfg"
	config_buffer = ""
	config_default = "10,,255,255,255,0,0,0,1000,0"
	config_fontsize = 0
	config_font = ""
	config_font_color_R = 0
	config_font_color_G = 0
	config_font_color_B = 0
	config_back_color_R = 0
	config_back_color_G = 0
	config_back_color_B = 0
	config_refresh_ms = 0
	config_adjust = 0
	;configファイルがなかったら作成するやつ
	debug_text = "init.configfilesetup"
	exist config_file
	if(strsize = -1){bsave config_file,config_default,strlen(config_default):dialog"設定ファイルが見つかりませんでした。\n新しく設定ファイルを作成します。"}
	;表示される画面作る
	debug_text = "init.display"
	title program_name + " " + version
	onexit goto *clock_exit
	onerror goto *error_occurred
	bgscr 0, ginfo_dispx, ginfo_dispy, , 0, 0
	gsel 0, 2
	objmode 2,1
	;Let's party!!!
	gosub *clock_config_read
	goto *clock
;----------↓便利な命令たち↓----------
#deffunc drawbackground int backR, int backG, int backB, int fontR, int fontG, int fontB
	redraw 0
	cls
	color backR,backG,backB
	boxf
	color fontR,fontG,fontB
	font config_font,config_fontsize
	objmode 2,1
	redraw 1
	return
;----------↓便利な機能たち↓----------
*clock_config_read
	;コンフィグファイルを読み込む
	debug_text = "clock_config_read.readconfigfile"
	bload config_file,config_buffer
	;読み込んだデータの値が正しいかどうか調べる
	debug_text = "clock_config_read.verify"
	str_cnt = 0
	repeat strlen(config_buffer)
		if(strmid(config_buffer,cnt,1) = ","){str_cnt++}
	loop
	if(str_cnt ! 9){config_buffer = config_default:dialog "設定ファイルの値を正しく読み込めませんでした。\n設定を初期化します。"}
	;読み込んだデータを変換
	debug_text = "clock_config_read.convert"
	split config_buffer,",",config_fontsize,config_font,config_font_color_R,config_font_color_G,config_font_color_B,config_back_color_R,config_back_color_G,config_back_color_B,config_refresh_ms,config_adjust
	;文字型から数字型へ変換
	gosub *clock_config_strtoint
	;設定の値が範囲内かどうか調べる
	gosub *clock_config_verify
	;おわり
	gosub *clock_config_apply
	return
*clock_config_save
	;数字型から文字型へ変換
	gosub *clock_config_inttostr
	;コンフィグファイルに書き込む
	debug_text = "clock_config_save.saveconfigfile"
	config_buffer = config_fontsize+","+config_font+","+config_font_color_R+","+config_font_color_G+","+config_font_color_B+","+config_back_color_R+","+config_back_color_G+","+config_back_color_B+","+config_refresh_ms+","+config_adjust
	bsave config_file,config_buffer,strlen(config_buffer)
	;文字型から数字型へ変換
	gosub *clock_config_strtoint
	pos 0,0
	mes "設定を保存しました。"
	;おわり
	return
*clock_config_inttostr
	debug_text = "clock_config_inttostr.start"
	config_fontsize = str(config_fontsize)
	config_font_color_R = str(config_font_color_R)
	config_font_color_G = str(config_font_color_G)
	config_font_color_B = str(config_font_color_B)
	config_back_color_R = str(config_back_color_R)
	config_back_color_G = str(config_back_color_G)
	config_back_color_B = str(config_back_color_B)
	config_refresh_ms = str(config_refresh_ms)
	config_adjust = str(config_adjust)
	return
*clock_config_strtoint
	debug_text = "clock_config_strtoint.start"
	config_fontsize = int(config_fontsize)
	config_font_color_R = int(config_font_color_R)
	config_font_color_G = int(config_font_color_G)
	config_font_color_B = int(config_font_color_B)
	config_back_color_R = int(config_back_color_R)
	config_back_color_G = int(config_back_color_G)
	config_back_color_B = int(config_back_color_B)
	config_refresh_ms = int(config_refresh_ms)
	config_adjust = int(config_adjust)
	return
*clock_config_verify
	debug_text = "clock_config_verify.start"
	if(config_font_color_R < 0){config_font_color_R = 0}
	if(config_font_color_R > 255){config_font_color_R = 255}
	if(config_font_color_G < 0){config_font_color_G = 0}
	if(config_font_color_G > 255){config_font_color_G = 255}
	if(config_font_color_B < 0){config_font_color_B = 0}
	if(config_font_color_B > 255){config_font_color_B = 255}
	if(config_back_color_R < 0){config_back_color_R = 0}
	if(config_back_color_R > 255){config_back_color_R = 255}
	if(config_back_color_G < 0){config_back_color_G = 0}
	if(config_back_color_G > 255){config_back_color_G = 255}
	if(config_back_color_B < 0){config_back_color_B = 0}
	if(config_back_color_B > 255){config_back_color_B = 255}
	if(config_refresh_ms < 1){config_refresh_ms = 1000}
	return
*clock_config_change
	debug_text = "clock_config_change.start"
	mouse
	drawbackground config_back_color_R,config_back_color_G,config_back_color_B,config_font_color_R,config_font_color_G,config_font_color_B
	config_select_temp = config_select
	objmode 1,1
	sysfont 13
	redraw 0
	objsize ginfo(12)/3, ginfo(13)/30
	pos ginfo(12)/3,0
	combox config_select,,"文字の大きさ\n文字のフォント\n文字の色(RGB)\n背景の色(RGB)\n時計の更新間隔(ミリ秒)\n文字の左右の調整"
	switch config_select
	case 0
		input config_fontsize
		swbreak
	case 1
		input config_font
		swbreak
	case 2
		input config_font_color_R,,,3
		input config_font_color_G,,,3
		input config_font_color_B,,,3
		swbreak
	case 3
		input config_back_color_R,,,3
		input config_back_color_G,,,3
		input config_back_color_B,,,3
		swbreak
	case 4
		input config_refresh_ms
		swbreak
	case 5
		input config_adjust
		swbreak
	default
		config_select = 0
		goto *clock_config_change
	swend 
	//画面サイズをx, オブジェクトサイズを x/4, としたときのposは x/2 - x/4/2
	//(画面サイズ) / 2 - (オブジェクトサイズ) / 2
	//これで中央配置ができる
	pos ginfo(12)/3, ginfo(13)*9/10
	button goto "戻る", *clock
	button gosub "保存", *clock_config_save
	button goto "終了", *clock_exit
	redraw 1
	*clock_config_change_loop
	wait 10
	gosub *clock_config_verify
	if(config_select != config_select_temp){goto *clock_config_change}
	goto *clock_config_change_loop
	;おわり
	debug_text = "clock_config_change.end"
	goto *error_occurred
*clock_config_apply
	debug_text = "clock_config_apply.draw"
	drawbackground config_back_color_R,config_back_color_G,config_back_color_B,config_font_color_R,config_font_color_G,config_font_color_B
	return
*key_input
	debug_text = "key_input.if"
	onkey 0
	if(iparam=27){goto *clock_config_change}//EscKey
	if(iparam=32){goto *clock_config_change}//SpaceKey
	return
*clock_exit
	debug_text = "clock_exit.end"
	gosub *clock_config_save
	end
;----------↓時計本体↓----------
*clock
	debug_text = "clock.init"
	mouse -1
	gosub *clock_config_apply
	onkey gosub *key_input
	debug_text = "clock.repeat"
	repeat -1
		if(cnt=120){goto *clock}
		debug_text = "clock.draw"
		redraw 0
		color config_back_color_R, config_back_color_G, config_back_color_B:boxf
		color config_font_color_R, config_font_color_G, config_font_color_B
		clock_text = strf("%02d:%02d:%02d",gettime(4),gettime(5),gettime(6))
		pos ginfo(12)/2-((strlen(clock_text)+config_adjust)*(config_fontsize/2))/2 , ginfo(13)/2-config_fontsize/2
		mes clock_text
		redraw 1
		await config_refresh_ms
	loop
	
	debug_text = "clock.end"
	goto *error_occurred
;----------↓エラー処理↓----------
*error_occurred
error_program_name = "プログラム名: "+program_name+"\n"
error_reason = "エラー番号: "+wparam+"\nエラー発生行: "+lparam+"\n実行時コマンドライン: "+dir_cmdline+"\n"
error_program_info = "\nサブルーチンのネストレベル: "+sublev+"\nループのネストレベル: "+looplev+"\n"
error_variable = "変数(debug_text): "+debug_text+"\n変数(config_file); "+config_file+"\n変数(config_buffer)"+config_buffer+"\n変数(str_cnt): "+str_cnt+"\n変数(config_select): "+config_select+"\n変数(clock_text): "+clock_text+"\n"
error_config = "設定(config_fontsize): "+config_fontsize+"\n設定(config_font): "+config_font+"\n設定(config_font_color_R): "+config_font_color_R+"\n設定(config_font_color_G): "+config_font_color_G+"\n設定(config_font_color_B): "+config_font_color_B+"\n設定(config_back_color_R): "+config_back_color_R+"\n設定(config_back_color_G): "+config_back_color_G+"\n設定(config_back_color_B): "+config_back_color_B+"\n設定(config_refresh_ms): "+config_refresh_ms+"\n設定(config_adjust): "+config_adjust+"\n"
error_system_info = "OS: "+sysinfo(0)+"\nCPU: "+sysinfo(16)+"\n物理メモリ: "+sysinfo(35)+"/"+sysinfo(34)+"("+sysinfo(33)+"%)"+"\nスワップファイル: "+sysinfo(37)+"/"+sysinfo(36)+"\n画面サイズ(x): "+ginfo_dispx+"\n画面サイズ(y): "+ginfo_dispy+"\n"
error_HSP_info = "HSPランタイム: "+hspstat+"\nHSPエラーコード: "+err+"\nHSPバージョン: "+hspver+"\n"
error_now_time = strf("時間: %02d/%02d/%02d %02d:%02d:%02d",gettime(0),gettime(1),gettime(3),gettime(4),gettime(5),gettime(6))+"\n"
error_version = "プログラムバージョン: "+version+"\n"
error_message = "エラーが発生しました。\nこのメッセージをコピーして制作者に送ってください。\n--------------------詳細--------------------\n"+error_program_name+error_reason+error_program_info+error_variable+error_config+error_system_info+error_HSP_info+error_now_time+error_version

bsave error_logfile,error_message,-1
dialog "エラーが発生しました。\n詳細は実行ファイルと同じディレクトリに生成される\n"+error_logfile+"\nを参照してください。"
end
